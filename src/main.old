#include <curses.h>
#include <signal.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>

#define PLAYFIELD_ROWS 20
#define PLAYFIELD_COLUMNS 10
#define PLAYFIELD_TEXT_COLUMNS (PLAYFIELD_COLUMNS * 2)
#define PLAYFIELD_OFFSET_ROWS 15
#define PLAYFIELD_OFFSET_COLUMNS 45

#define PREVIEW_ROWS 2
#define PREVIEW_COLUMNS 6
#define PREVIEW_TEXT_COLUMNS (PREVIEW_COLUMNS * 2)
#define PREVIEW_OFFSET_ROWS 25
#define PREVIEW_OFFSET_COLUMNS 70

#define TETRIMINO_COUNT 7
#define SQUARES_PER_TETRIMINO 4


static void finish(int _);

typedef enum {
    Tetrimino_empty = 0,
    Tetrimino_lightBlue = 1,
    Tetrimino_darkBlue = 2,
    Tetrimino_orange = 3,
    Tetrimino_yellow = 4,
    Tetrimino_green = 5,
    Tetrimino_red = 6,
    Tetrimino_magenta = 7,
} TetriminoColor;

typedef enum {
    Facing_up,
    Facing_down,
    Facing_right,
    Facing_left,
} Orientation;

TetriminoColor playfield[PLAYFIELD_ROWS][PLAYFIELD_COLUMNS] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

void clear_playfield()
{
    memset(playfield, 0,
           PLAYFIELD_ROWS * PLAYFIELD_COLUMNS * sizeof(TetriminoColor));
}

TetriminoColor preview[PREVIEW_ROWS][PREVIEW_COLUMNS] = {
    {0, 0, 0, 0, 0, 0 },
    {0, 0, 0, 0, 0, 0 },
};

void clear_preview()
{
    memset(preview, 0,
           PREVIEW_ROWS * PREVIEW_COLUMNS * sizeof(TetriminoColor));
}

typedef struct {
    int centroidRow;
    int centroidColumn;
    TetriminoColor type;
    Orientation orientation;
} Tetrimino;

typedef struct {
    int row;
    int column;
} Vec2;

void indicies_for_down(Tetrimino *current, Vec2 indicies[])
{
    switch (current->type)
    {
        case Tetrimino_empty:
            // TODO: Probably a better way to do this...
            return;

        case Tetrimino_lightBlue:
            indicies[0].row = current->centroidRow + 1;
            indicies[0].column = current->centroidColumn;
            indicies[1].row = current->centroidRow + 1;
            indicies[1].column = current->centroidColumn - 1;
            indicies[2].row = current->centroidRow + 1;
            indicies[2].column = current->centroidColumn + 1;
            indicies[3].row = current->centroidRow + 1;
            indicies[3].column = current->centroidColumn + 2;
            return;

        case Tetrimino_darkBlue:
            indicies[0].row = current->centroidRow + 1;
            indicies[0].column = current->centroidColumn;
            indicies[1].row = current->centroidRow + 1;
            indicies[1].column = current->centroidColumn - 1;
            indicies[2].row = current->centroidRow;
            indicies[2].column = current->centroidColumn - 1;
            indicies[3].row = current->centroidRow + 1;
            indicies[3].column = current->centroidColumn + 1;
            return;

        case Tetrimino_orange:
            indicies[0].row = current->centroidRow + 1;
            indicies[0].column = current->centroidColumn;
            indicies[1].row = current->centroidRow + 1;
            indicies[1].column = current->centroidColumn - 1;
            indicies[2].row = current->centroidRow + 1;
            indicies[2].column = current->centroidColumn + 1;
            indicies[3].row = current->centroidRow;
            indicies[3].column = current->centroidColumn + 1;
            return;

        case Tetrimino_yellow:
            indicies[0].row = current->centroidRow + 1;
            indicies[0].column = current->centroidColumn;
            indicies[1].row = current->centroidRow + 1;
            indicies[1].column = current->centroidColumn + 1;
            indicies[2].row = current->centroidRow;
            indicies[2].column = current->centroidColumn;
            indicies[3].row = current->centroidRow;
            indicies[3].column = current->centroidColumn + 1;
            return;

        case Tetrimino_green:
            indicies[0].row = current->centroidRow + 1;
            indicies[0].column = current->centroidColumn;
            indicies[1].row = current->centroidRow + 1;
            indicies[1].column = current->centroidColumn - 1;
            indicies[2].row = current->centroidRow;
            indicies[2].column = current->centroidColumn;
            indicies[3].row = current->centroidRow;
            indicies[3].column = current->centroidColumn + 1;
            return;

        case Tetrimino_red:
            indicies[0].row = current->centroidRow + 1;
            indicies[0].column = current->centroidColumn;
            indicies[1].row = current->centroidRow;
            indicies[1].column = current->centroidColumn;
            indicies[2].row = current->centroidRow;
            indicies[2].column = current->centroidColumn - 1;
            indicies[3].row = current->centroidRow + 1;
            indicies[3].column = current->centroidColumn + 1;
            return;

        case Tetrimino_magenta:
            indicies[0].row = current->centroidRow + 1;
            indicies[0].column = current->centroidColumn;
            indicies[1].row = current->centroidRow + 1;
            indicies[1].column = current->centroidColumn - 1;
            indicies[2].row = current->centroidRow;
            indicies[2].column = current->centroidColumn;
            indicies[3].row = current->centroidRow + 1;
            indicies[3].column = current->centroidColumn + 1;
            return;
    }
}

[[nodiscard]]
bool is_self(Vec2 indicies[], int currentRow, int currentColumn)
{
    for (int i = 0; i < SQUARES_PER_TETRIMINO; ++i)
    {
        if (indicies[i].row - 1 == currentRow
            && indicies[i].column == currentColumn)
        {
            return true;
        }
    }

    return false;
}

[[nodiscard]]
bool valid_move(Vec2 indicies[])
{
    int currentRow = 0;
    int currentColumn = 0;

    for (int i = 0; i < SQUARES_PER_TETRIMINO; ++i)
    {
        currentRow = indicies[i].row;
        currentColumn = indicies[i].column;

        if (currentRow < 0 || currentColumn < 0)
        {
            return false;
        }

        if (currentRow >= PLAYFIELD_ROWS || currentColumn >= PLAYFIELD_COLUMNS)
        {
            return false;
        }

        if (playfield[currentRow][currentColumn] != Tetrimino_empty)
        {
            if (!is_self(indicies, currentRow, currentColumn))
            {
                return false;
            }
        }
    }

    return true;
}

[[nodiscard]]
bool move_down(Tetrimino *current)
{
    Vec2 indicies[SQUARES_PER_TETRIMINO];
    indicies_for_down(current, indicies);

    if (!valid_move(indicies))
    {
        return false;
    }

    for (int i = 0; i < SQUARES_PER_TETRIMINO; ++i)
    {
        playfield[indicies[i].row - 1][indicies[i].column] = Tetrimino_empty;
    }

    for (int i = 0; i < SQUARES_PER_TETRIMINO; ++i)
    {
        playfield[indicies[i].row][indicies[i].column] = current->type;
    }

    ++current->centroidRow;
    return true;
}

void show_preview(Game *game)
{
    switch (game->currentTetrimino.type)
    {
        case Tetrimino_empty:
            // TODO: Should never happen - how to handle error?
            return;

        //   [ ][*][ ][ ]
        case Tetrimino_lightBlue:
            current->centroidRow = 0;
            current->centroidColumn = 4;
            preview[0][1] = current->type;
            preview[0][2] = current->type;
            preview[0][3] = current->type;
            preview[0][4] = current->type;
            return;

        //   [ ]
        //   [ ][*][ ]
        case Tetrimino_darkBlue:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            preview[0][1] = current->type;
            preview[1][1] = current->type;
            preview[1][2] = current->type;
            preview[1][3] = current->type;
            return;

        //         [ ]
        //   [ ][*][ ]
        case Tetrimino_orange:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            preview[1][1] = current->type;
            preview[1][2] = current->type;
            preview[1][3] = current->type;
            preview[0][3] = current->type;
            return;

        //   [ ][ ]
        //   [*][ ]
        case Tetrimino_yellow:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            preview[0][2] = current->type;
            preview[0][3] = current->type;
            preview[1][2] = current->type;
            preview[1][3] = current->type;
            return;

        //   [ ][ ]
        //      [*][ ]
        case Tetrimino_red:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            preview[0][1] = current->type;
            preview[0][2] = current->type;
            preview[1][2] = current->type;
            preview[1][3] = current->type;
            return;

        //      [ ][ ]
        //   [ ][*]
        case Tetrimino_green:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            preview[0][2] = current->type;
            preview[0][3] = current->type;
            preview[1][1] = current->type;
            preview[1][2] = current->type;
            return;

        //      [ ]
        //   [ ][*][ ]
        case Tetrimino_magenta:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            preview[0][2] = current->type;
            preview[1][1] = current->type;
            preview[1][2] = current->type;
            preview[1][3] = current->type;
            return;
    }
}

void spawn_tetrimino(Tetrimino *current)
{
    switch (current->type)
    {
        case Tetrimino_empty:
            // TODO: Should never happen - how to handle error?
            return;

        //   [ ][*][ ][ ]
        case Tetrimino_lightBlue:
            current->centroidRow = 0;
            current->centroidColumn = 4;
            playfield[0][3] = current->type;
            playfield[0][4] = current->type;
            playfield[0][5] = current->type;
            playfield[0][6] = current->type;
            return;

        //   [ ]
        //   [ ][*][ ]
        case Tetrimino_darkBlue:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            playfield[0][3] = current->type;
            playfield[1][3] = current->type;
            playfield[1][4] = current->type;
            playfield[1][5] = current->type;
            return;

        //         [ ]
        //   [ ][*][ ]
        case Tetrimino_orange:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            playfield[1][3] = current->type;
            playfield[1][4] = current->type;
            playfield[1][5] = current->type;
            playfield[0][5] = current->type;
            return;

        //   [ ][ ]
        //   [*][ ]
        case Tetrimino_yellow:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            playfield[0][4] = current->type;
            playfield[0][5] = current->type;
            playfield[1][4] = current->type;
            playfield[1][5] = current->type;
            return;

        //   [ ][ ]
        //      [*][ ]
        case Tetrimino_red:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            playfield[0][3] = current->type;
            playfield[0][4] = current->type;
            playfield[1][4] = current->type;
            playfield[1][5] = current->type;
            return;

        //      [ ][ ]
        //   [ ][*]
        case Tetrimino_green:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            playfield[0][4] = current->type;
            playfield[0][5] = current->type;
            playfield[1][3] = current->type;
            playfield[1][4] = current->type;
            return;

        //      [ ]
        //   [ ][*][ ]
        case Tetrimino_magenta:
            current->centroidRow = 1;
            current->centroidColumn = 4;
            playfield[0][4] = current->type;
            playfield[1][3] = current->type;
            playfield[1][4] = current->type;
            playfield[1][5] = current->type;
            return;
    }
}

void init_windows(WINDOW *windows[PLAYFIELD_ROWS])
{
    for (int i = 0; i < PLAYFIELD_ROWS; ++i)
    {
        windows[i] = newwin(1, PLAYFIELD_TEXT_COLUMNS,
                            PLAYFIELD_OFFSET_ROWS + i,
                            PLAYFIELD_OFFSET_COLUMNS);
        wrefresh(windows[i]);
    }
}

void init_colors()
{
    init_pair(Tetrimino_empty, COLOR_BLACK, COLOR_BLACK);
    init_pair(Tetrimino_lightBlue, COLOR_BLACK, 51);
    init_pair(Tetrimino_darkBlue, COLOR_BLACK, 57);
    init_pair(Tetrimino_orange, COLOR_BLACK, 208);
    init_pair(Tetrimino_yellow, COLOR_BLACK, 190);
    init_pair(Tetrimino_green, COLOR_BLACK, 46);
    init_pair(Tetrimino_red, COLOR_BLACK, 196);
    init_pair(Tetrimino_magenta, COLOR_BLACK, 171);
}

void update_screen(WINDOW *playfieldWindow[PLAYFIELD_ROWS],
                   WINDOW *previewWindow[PREVIEW_ROWS])
{
    int insertion = 0;

    for (int row = 0; row < PLAYFIELD_ROWS; ++row)
    {
        insertion = 0;

        for (int column = 0; column < PLAYFIELD_COLUMNS; ++column)
        {
            WINDOW *window = playfieldWindow[row];

            wattron(window, COLOR_PAIR(playfield[row][column]));
            mvwprintw(window, 0, insertion++, " ");
            mvwprintw(window, 0, insertion++, " ");
            wattroff(window, COLOR_PAIR(playfield[row][column]));
            wrefresh(window);
            refresh();
        }
    }

    for (int row = 0; row < PREVIEW_ROWS; ++row)
    {
        insertion = 0;

        for (int column = 0; column < PREVIEW_COLUMNS; ++column)
        {
            WINDOW *window = previewWindow[row];

            wattron(window, COLOR_PAIR(preview[row][column]));
            mvwprintw(window, 0, insertion++, " ");
            mvwprintw(window, 0, insertion++, " ");
            wattroff(window, COLOR_PAIR(preview[row][column]));
            wrefresh(window);
            refresh();
        }
    }
}

TetriminoColor only_one_remains(TetriminoColor bag[])
{
    TetriminoColor selection = Tetrimino_empty;

    for (int i = 0; i < TETRIMINO_COUNT; ++i)
    {
        if (bag[i] != Tetrimino_empty)
        {
            if (selection == Tetrimino_empty)
            {
                selection = bag[i];
            }
            else
            {
                return Tetrimino_empty;
            }
        }
    }

    return selection;
}

void reset_bag(TetriminoColor bag[])
{
    bag[0] = Tetrimino_empty;
    bag[0] = Tetrimino_lightBlue;
    bag[1] = Tetrimino_darkBlue;
    bag[2] = Tetrimino_orange;
    bag[3] = Tetrimino_yellow;
    bag[4] = Tetrimino_green;
    bag[5] = Tetrimino_red;
    bag[6] = Tetrimino_magenta;
}

TetriminoColor get_next_tetrimino(TetriminoColor bag[])
{
    TetriminoColor selection = only_one_remains(bag);

    if (selection)
    {
        reset_bag(bag);
        return selection;
    }

    int index = rand() % (TETRIMINO_COUNT - 1);

    while (bag[index] == Tetrimino_empty)
    {
        index = rand() % (TETRIMINO_COUNT - 1);
    }

    selection = bag[index];
    bag[index] = Tetrimino_empty;

    return selection;
}

bool game_over(Tetrimino *next)
{
    switch (next->type)
    {
        case Tetrimino_empty:
            // TODO: Should never happen - how to handle error?
            return false;

        case Tetrimino_lightBlue:
            if (playfield[0][3] != Tetrimino_empty
                || playfield[0][4] != Tetrimino_empty
                || playfield[0][5] != Tetrimino_empty
                || playfield[0][6] != Tetrimino_empty)
            {
                return true;
            }
            return false;

        case Tetrimino_darkBlue:
            if (playfield[0][3] != Tetrimino_empty
                || playfield[1][3] != Tetrimino_empty
                || playfield[1][4] != Tetrimino_empty
                || playfield[1][5] != Tetrimino_empty)
            {
                return true;
            }
            return false;

        case Tetrimino_orange:
            if (playfield[1][3] != Tetrimino_empty
                || playfield[1][4] != Tetrimino_empty
                || playfield[1][5] != Tetrimino_empty
                || playfield[0][5] != Tetrimino_empty)
            {
                return true;
            }
            return false;

        case Tetrimino_yellow:
            if (playfield[0][4] != Tetrimino_empty
                || playfield[0][5] != Tetrimino_empty
                || playfield[1][4] != Tetrimino_empty
                || playfield[1][5] != Tetrimino_empty)
            {
                return true;
            }
            return false;

        case Tetrimino_red:
            if (playfield[0][3] != Tetrimino_empty
                || playfield[0][4] != Tetrimino_empty
                || playfield[1][4] != Tetrimino_empty
                || playfield[1][5] != Tetrimino_empty)
            {
                return true;
            }
            return false;

        case Tetrimino_green:
            if (playfield[0][4] != Tetrimino_empty
                || playfield[0][5] != Tetrimino_empty
                || playfield[1][3] != Tetrimino_empty
                || playfield[1][4] != Tetrimino_empty)
            {
                return true;
            }
            return false;

        case Tetrimino_magenta:
            if (playfield[0][3] != Tetrimino_empty
                || playfield[0][4] != Tetrimino_empty
                || playfield[0][5] != Tetrimino_empty
                || playfield[1][4] != Tetrimino_empty)
            {
                return true;
            }
            return false;
    }

    return true; // TODO: Handle this.
}

Tetrimino make_random_tetrimino(TetriminoColor bag[])
{
    return (Tetrimino){0, 0, get_next_tetrimino(bag), Facing_up};
}

int main(void)
{
    srand(time(NULL));

    TetriminoColor bag[7] = {
        Tetrimino_lightBlue,
        Tetrimino_darkBlue,
        Tetrimino_orange,
        Tetrimino_yellow,
        Tetrimino_green,
        Tetrimino_red,
        Tetrimino_magenta,
    };

    signal(SIGINT, finish);

    initscr();
    start_color();
    noecho();

    if (COLORS < 256)
    {
        endwin();
        printw("256-color mode not supported.");
        getch();
        finish(1);
    }

    init_colors();

    // Playfield Border
    WINDOW *playfieldBorder =
        newwin(PLAYFIELD_ROWS + 2, PLAYFIELD_TEXT_COLUMNS + 2,
               PLAYFIELD_OFFSET_ROWS - 1, PLAYFIELD_OFFSET_COLUMNS - 1);
    box(playfieldBorder, 0, 0);
    refresh();
    wrefresh(playfieldBorder);

    // Playfield Init
    WINDOW *playfieldWindows[PLAYFIELD_ROWS];
    init_windows(playfieldWindows);

    // Preview Border
    WINDOW *previewBorder =
        newwin(PREVIEW_ROWS + 2, PREVIEW_TEXT_COLUMNS + 2,
               PREVIEW_OFFSET_ROWS - 1, PREVIEW_OFFSET_COLUMNS - 1);
    box(previewBorder, 0, 0);
    mvwprintw(previewBorder, 0, 5, "Next");
    refresh();
    wrefresh(previewBorder);

    // Preview Init
    WINDOW *previewWindows[PREVIEW_ROWS] = {
        newwin(1, PREVIEW_TEXT_COLUMNS, PREVIEW_OFFSET_ROWS,
               PREVIEW_OFFSET_COLUMNS),
        newwin(1, PREVIEW_TEXT_COLUMNS, PREVIEW_OFFSET_ROWS + 1,
               PREVIEW_OFFSET_COLUMNS),
    };
    refresh();
    wrefresh(previewWindows[0]);
    wrefresh(previewWindows[1]);


    Tetrimino current = make_random_tetrimino(bag);
    Tetrimino next = make_random_tetrimino(bag);

    spawn_tetrimino(&current);
    show_preview(&next);

    // Game Loop
    while (true)
    {
        update_screen(playfieldWindows, previewWindows);
        refresh();
        // getch();

        if (!move_down(&current))
        {
            getch();
            if (game_over(&next))
            {
                mvwprintw(playfieldBorder, 0, 6, "Game Over");
                wrefresh(playfieldBorder);
                char choice = getch();
                while (choice != 'n')
                {
                    choice = getch();
                }
                finish(0);

                // Reset and Restart
            }

            current = next;
            next = make_random_tetrimino(bag);
            clear_preview();
            show_preview(&next);
            spawn_tetrimino(&current);
        }
    }

    finish(0);
}

static void finish([[maybe_unused]] int _)
{
    endwin();
    exit(0);
}

